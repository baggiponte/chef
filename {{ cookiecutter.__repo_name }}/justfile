set shell := ["zsh", "-uc"]
set positional-arguments

# List all available recipes
@help:
  just --list

# Create a git repo if not exists, install dependencies and pre-commit hooks
@install:
  {% raw %}{{just_executable()}} needs pdm{% endraw %}

  print "Installing dependencies..."
  pdm install --group=:all --dev 

  print "Installing pre-commit hooks..."
  pdm run pre-commit install --install-hooks

# Install dependencies and configure CI/CD with Github Actions
init: ensure-git ensure-github install
  print "To enable CI/CD workflows, you need to configure the PERSONAL_ACCESS_TOKEN manually. You can set it with:"
  print "gh secret set PERSONAL_ACCESS_TOKEN --body=<token> --app=actions"
  print "⚠️ Do not pass the token as plain text, or it will persist in your shell history!"

# Update the lockfile (e.g. after manually editing `pyproject.toml`)
@lock:
  pdm lock
  pdm sync --clean

# Update dependencies and update pre-commit hooks
@update: lock
  print "Updating dependencies..."
  pdm update

  print "Updating pre-commit hooks..."
  pdm run pre-commit install-hooks
  pdm run pre-commit autoupdate

# Format code with black and isort
@fmt:
  pdm run black -- src tests
  pdm run blacken-docs -- src/**/*.py tests/*.py
  pdm run ruff --select=I001 --fix -- src tests

# Lint the project with Ruff
@lint:
  pdm run ruff -- src tests

# Perform static type checking with mypy
@typecheck:
  pdm run mypy -- src tests

# Audit dependencies with pip-audit
@audit:
  pdm run pip-audit
  pdm run deptry -- src tests

# Run all pre-release checks
pre-release: fmt lint typecheck audit check-commits check-bump

# Bump the version
@bump: check-commits check-bump
  pdm run cz bump

# Release a new version
release: fmt audit lint typecheck bump
  git push
  git push --tag

# Commit with conventional commits
@commit:
  pdm run cz commit

alias c := commit

# Export production dependencies to requirements.txt
@export:
  pdm export --prod -f=requirements > requirements.txt
  pdm export --no-default --dev -f=requirements > requirements-dev.txt

# Run all tests
test:
  pdm run pytest --cov=src/{{ cookiecutter.package_name }} --cov-report=term-missing --cov-report=html

# Live preview the documentation
preview-docs:
  pdm run mike serve --config-file=docs/mkdocs.yml

# Check whether the commit messages follow the conventional commit format
check-commits:
  #! /usr/bin/env zsh
  set -euo pipefail

  local revs
  revs=($(git rev-list origin/main..HEAD))

  if [[ $#revs -eq 0 ]]; then
    print "No commits to check."
    exit 0
  else
    pdm run cz check --rev-range origin/main..HEAD
  fi

# Check the version can be bumped without errors
@check-bump:
  pdm run cz bump --dry-run

# Assert a command is available
[private]
needs *commands:
  #!/usr/bin/env zsh
  set -euo pipefail
  for cmd in "$@"; do
    if ! command -v $cmd &> /dev/null; then
      print "$cmd binary not found. Did you forget to install it?"
      exit 1
    fi
  done

# Create a local git repo if not in one
[private]
ensure-git:
  #! /usr/bin/env zsh
  if ! [[ -d .git ]]; then
    git init
  fi

# Ask to create a remote repo if not exists
[private]
ensure-github:
  #! /usr/bin/env zsh
  if ! gh repo list {{ cookiecutter.author_github_handle }} | grep --quiet "/\b{{ cookiecutter.__repo_name }}\b"; then
    while true; do
      print -n "No remote repository found. Do you want to create a new repository? (y/n): "
      read -r REPLY

      case $REPLY in
        [Yy])
          print -n "Do you want to create a private repository? (y/n): "
          read -r PRIVATE
          case $PRIVATE in
            [Yy])
              gh repo create {{ cookiecutter.author_github_handle }}/{{ cookiecutter.__repo_name }} --private --source=.
              ;;
            [Nn])
              gh repo create {{ cookiecutter.author_github_handle }}/{{ cookiecutter.__repo_name }} --public --source=.
              ;;
            *)
              print "Invalid input. Please enter 'y' or 'n'."
              ;;
          esac
          break
          ;;
        [Nn])
          break
          ;;
        *)
          print "Invalid input. Please enter 'y' or 'n'."
          ;;
      esac
    done
  else 
    while true; do
      print -n "A repo with this name already exists. Do you want to add it as a remote? (y/n): "
      read -r REPLY

      case $REPLY in
        [Yy])
          git remote add origin git@github.com:{{ cookiecutter.author_github_handle }}/{{ cookiecutter.__repo_name }}
          break
          ;;
        [Nn])
          break
          ;;
        *)
          print "Invalid input. Please enter 'y' or 'n'."
          ;;
      esac
    done
  fi
